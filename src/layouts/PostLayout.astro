---
import type { CollectionEntry } from 'astro:content';
import ShareButton from 'src/components/blog/ShareButton.astro';
import Icon from 'src/components/common/Icon.astro';
import FormattedDate from 'src/components/FormattedDate.astro';
import Header from 'src/components/main/header/Header.astro';
import { SITE_BASE_URL, SITE_BLOG_TITLE } from 'src/consts';
import { getPostUrl } from 'src/utilities/content';
import { mdToExcerpt } from 'src/utilities/markdown';
import Footer from '../components/Footer.astro';
import MainLayout from './MainLayout.astro';

import 'src/styles/code-blocks.scss';
import 'src/styles/shiki.scss';

type Props = CollectionEntry<'blog'>;
const post = Astro.props;
const { data, slug, body } = post;
const { title, date, updated, heroImage, heroAlt, authors } = data;

const url = SITE_BASE_URL + getPostUrl(post);
// TODO: Restore when ready
// const ogImageUrl = SITE_BASE_URL + getPostOgImage(post);
const excerpt = mdToExcerpt.processSync(body).value.toString();

const prefix = '/assets/img';
const year = date.getFullYear();
const month = date.getMonth() + 1;
const imgPath = heroImage && `${prefix}/${year}/${month}/${slug}-${heroImage}`;
---

<MainLayout
  light
  title={() => `${title} | ${SITE_BLOG_TITLE}`}
  description={excerpt}
>
  <div class="BACKGROUND_DYNAMIC_COLOR TEXT_DYNAMIC_COLOR">
    <Header alwaysShowLogo />
    {
      /* <!-- TODO: Back button -->
    <!-- <div class="flex items-center justify-center">
      <a
        href="/blog"
        class="flex items-center gap-2 bg-gray-100 dark:bg-gray-700 dark:text-stone-300 px-2 py-1 rounded-lg"
      >
        <Icon inline icon="feather:arrow-left" />
        Back to Blog
      </a>
    </div> --> */
    }
    <main>
      <div
        class:list={[
          'post',
          'max-w-4xl mx-auto px-6 lg:px-0 space-y-2 TEXT_NORMAL',
        ]}
      >
        {
          imgPath && (
            <div
              class="mt-[1em] bg-cover bg-center rounded-[0.3em] overflow-hidden"
              style={{ backgroundImage: `url("${imgPath}")` }}
            >
              <div class="min-w-full md:min-w-max backdrop-blur-3xl">
                <img
                  class="rounded-md mx-auto aspect-[2.4/1] md:aspect-[2/1] object-cover select-none"
                  src={imgPath}
                  alt={heroAlt || 'Cover Image'}
                />
              </div>
            </div>
          )
        }
        <h1
          class="text-2xl md:text-3xl lg:text-4xl TEXT_BOLD !my-7 !leading-tight"
        >
          {title}
        </h1>
        <span class="italic uppercase">
          <FormattedDate withDay date={date} />
        </span>
        <div class="flex flex-wrap gap-2 items-center">
          <span>Author{authors.length !== 1 && 's'}:</span>
          <ul class:list={['post-author', 'flex gap-2 flex-wrap']}>
            {
              authors.map((author) => (
                <li class="bg-gray-100 dark:bg-gray-700 dark:text-stone-300 px-2 py-0.5 rounded-lg">
                  <Icon inline icon="emojione:bust-in-silhouette" />
                  {author}
                </li>
              ))
            }
          </ul>
        </div>
        <hr class="!my-4 dark:border-[color:unset]" />
        <ShareButton title={title} url={url} />
        <hr class="!my-4 dark:border-[color:unset]" />
        {
          updated && updated.getTime() !== date.getTime() && (
            <>
              <span class="italic text-xs block text-stone-600 uppercase">
                Last Updated on
                <FormattedDate withDay date={updated} />
              </span>
              <hr class="!my-4" />
            </>
          )
        }
        <article
          class:list={[
            'space-y-4 leading-relaxed text-justify',
            '[&_code]:text-[0.9em]',
            '[&_pre>code]:text-[0.875em]',
            '[&_:is(h1,h2,h3,h4,h5,h6)_code]:text-[length:unset]',
          ]}
        >
          <slot />
        </article>
      </div>
    </main>
    <Footer />
  </div>
</MainLayout>
